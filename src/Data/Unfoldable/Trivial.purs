module Data.Unfoldable.Trivial
 ( Trivial(..)
 , UnfoldrCall(..)
 , foldEnum
 ) where

import Prelude

import Data.Foldable (class Foldable, foldMap, foldrDefault, foldMapDefaultL)
import Data.Unfoldable (class Unfoldable, class Unfoldable1, unfoldr)
import Data.Tuple.Nested ((/\), type (/\))
import Data.Maybe (Maybe(..))
import Data.Exists (Exists, mkExists, runExists)
import Data.Enum (class BoundedEnum, upFromIncluding)
import Data.Newtype (class Newtype)

-- | A constructor taking the same arguments as `unfoldr`.
data UnfoldrCall a b = UnfoldrCall (b -> Maybe (a /\ b)) b

-- | A newtype wrapping `UnfoldrCall`, existentially quantified over the "seed" type.
newtype Trivial a = Trivial (Exists (UnfoldrCall a))
derive instance Newtype (Trivial a) _

instance trivialUnfoldable :: Unfoldable Trivial where
  unfoldr f b = Trivial $ mkExists $ UnfoldrCall f b

instance trivialUnfoldable1 :: Unfoldable1 Trivial where
  unfoldr1 :: forall a b. (b -> a /\ Maybe b) -> b -> Trivial a
  unfoldr1 f = unfoldr adapter <<< Just
    where adapter :: Maybe b -> Maybe (a /\ Maybe b)
          adapter = map f

-- | An internal utility function for folding over the elements generated by
-- | an `UnfoldrCall`. Prefer using `Foldable Trivial`.
-- okay so this doesn't show up in docs anyways because it isn't exported. Phew!
foldlUnfolder :: forall a b c. (c -> a -> c) -> c -> UnfoldrCall a b -> c
foldlUnfolder f foldInit (UnfoldrCall g unfoldSeed) = lockstep unfoldSeed foldInit
  where lockstep :: b -> c -> c
        lockstep seed acc
          | Just (a /\ seed') <- g seed = lockstep seed' $ f acc a
          | otherwise = acc

instance trivialFoldable :: Foldable Trivial where
  foldl f b (Trivial e) = runExists (foldlUnfolder f b) e
  foldr f = foldrDefault f
  foldMap f = foldMapDefaultL f

-- | Map each element of a `BoundedEnum` into a monoid, and combine the results.
foldEnum :: forall a b. BoundedEnum a => Monoid b => (a -> b) -> b
foldEnum f = foldMap f everything
  where everything :: Trivial a
        everything = upFromIncluding bottom
